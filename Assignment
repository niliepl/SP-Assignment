#include <iostream>
#include <fstream>
#include <vector>
#include <iomanip>
#include <map>
#include <cmath>

using namespace std;

typedef struct {
    int year;
    int pupil_count;
    string level;
    string Category;
    string district;
    string state;
    string gender;
} Details;

void splitDataByCategory(const vector<Details>& pupilData, const string& primaryFile, const string& secondaryFile) {
    ofstream primaryOut(primaryFile), secondaryOut(secondaryFile);

    primaryOut << "Level, State, District, Year, Category, Gender, Pupil Count\n";
    secondaryOut << "Level, State, District, Year, Category, Gender, Pupil Count\n";

    for (const auto& pupil : pupilData) {
        if (pupil.level == "Secondary") {
            secondaryOut << pupil.level << ", " << pupil.state << ", " << pupil.district << ", " 
                         << pupil.year << ", " << pupil.Category << ", " << pupil.gender << ", " 
                         << pupil.pupil_count << endl;
        } else if (pupil.level == "Primary") {
            primaryOut << pupil.level << ", " << pupil.state << ", " << pupil.district << ", "
                       << pupil.year << ", " << pupil.Category << ", " << pupil.gender << ", "
                       << pupil.pupil_count << endl;
        }
    }

    primaryOut.close();
    secondaryOut.close();
}

void calculateDescriptiveStats(const vector<Details>& pupilData) {
    map<string, map<int, int>> primaryDistrictTotals, secondaryDistrictTotals;
    int totalPrimary2019 = 0, totalPrimary2020 = 0;
    int totalSecondary2019 = 0, totalSecondary2020 = 0;

    // First pass: Calculate totals
    for (const auto& pupil : pupilData) {
        if (pupil.level == "Primary") {
            if (pupil.year == 2019) {
                totalPrimary2019 += pupil.pupil_count;
                primaryDistrictTotals[pupil.district][2019] += pupil.pupil_count;
            } else if (pupil.year == 2020) {
                totalPrimary2020 += pupil.pupil_count;
                primaryDistrictTotals[pupil.district][2020] += pupil.pupil_count;
            }
        } else if (pupil.level == "Secondary") {
            if (pupil.year == 2019) {
                totalSecondary2019 += pupil.pupil_count;
                secondaryDistrictTotals[pupil.district][2019] += pupil.pupil_count;
            } else if (pupil.year == 2020) {
                totalSecondary2020 += pupil.pupil_count;
                secondaryDistrictTotals[pupil.district][2020] += pupil.pupil_count;
            }
        }
    }

    // Print overall statistics
    cout << fixed << setprecision(2);
    cout << "\n=== OVERALL STATISTICS ===\n";
    cout << "Primary Level:\n";
    cout << "Total pupils in 2019: " << totalPrimary2019 << "\n";
    cout << "Total pupils in 2020: " << totalPrimary2020 << "\n";
    cout << "\nSecondary Level:\n";
    cout << "Total pupils in 2019: " << totalSecondary2019 << "\n";
    cout << "Total pupils in 2020: " << totalSecondary2020 << "\n";

    // Print district-level statistics
    cout << "\n=== DISTRICT-LEVEL STATISTICS ===\n";
    
    // Primary Level Districts
    cout << "\nPRIMARY LEVEL\n";
    cout << setw(20) << "District" << setw(15) << "Percentage" << setw(15) << "Average" 
         << setw(20) << "Standard Deviation" << endl;
    cout << string(70, '-') << endl;
    
    for (const auto& districtData : primaryDistrictTotals) {
        string district = districtData.first;
        int pupils2019 = districtData.second.at(2019);
        int pupils2020 = districtData.second.at(2020);
        
        double mean = (pupils2019 + pupils2020) / 2.0;
        double variance = (pow(pupils2019 - mean, 2) + pow(pupils2020 - mean, 2)) / (2 - 1);
        double stdDev = sqrt(variance);
        
        // Calculate percentage of total (using 2020 numbers)
        double percentage = (pupils2020 * 100.0) / totalPrimary2020;
        
        cout << setw(20) << district 
             << setw(14) << percentage << "%" 
             << setw(15) << mean
             << setw(20) << stdDev << endl;
    }

    // Secondary Level Districts
    cout << "\nSECONDARY LEVEL\n";
    cout << setw(20) << "District" << setw(15) << "Percentage" << setw(15) << "Average" 
         << setw(20) << "Standard Deviation" << endl;
    cout << string(70, '-') << endl;
    
    for (const auto& districtData : secondaryDistrictTotals) {
        string district = districtData.first;
        int pupils2019 = districtData.second.at(2019);
        int pupils2020 = districtData.second.at(2020);
        
        double mean = (pupils2019 + pupils2020) / 2.0;
        double variance = (pow(pupils2019 - mean, 2) + pow(pupils2020 - mean, 2)) / (2 - 1);
        double stdDev = sqrt(variance);
        
        // Calculate percentage of total (using 2020 numbers)
        double percentage = (pupils2020 * 100.0) / totalSecondary2020;
        
        cout << setw(20) << district 
             << setw(14) << percentage << "%" 
             << setw(15) << mean
             << setw(20) << stdDev << endl;
    }
}

void analyzeDistrictTrends(const vector<Details>& pupilData) {
    map<string, map<int, int>> primaryDistrictTotals, secondaryDistrictTotals;

    // Aggregate data by district and year
    for (const auto& pupil : pupilData) {
        if (pupil.level == "Primary") {
            primaryDistrictTotals[pupil.district][pupil.year] += pupil.pupil_count;
        } else if (pupil.level == "Secondary") {
            secondaryDistrictTotals[pupil.district][pupil.year] += pupil.pupil_count;
        }
    }

    cout << "\n=== SIGNIFICANT DISTRICT CHANGES (â‰¥20%) ===\n";
    cout << setprecision(2) << fixed;
    
    // Format headers
    cout << setw(15) << "Level" << setw(20) << "District" << setw(15) << "2019" 
         << setw(15) << "2020" << setw(15) << "Change" << setw(20) << "Status" << endl;
    cout << string(100, '-') << endl;

    // Analyze Primary Level
    for (const auto& districtData : primaryDistrictTotals) {
        string district = districtData.first;
        int pupils2019 = districtData.second.at(2019);
        int pupils2020 = districtData.second.at(2020);
        double pctChange;
        
        // Handle new districts (2019 = 0)
        if (pupils2019 == 0 && pupils2020 > 0) {
            pctChange = 100.0;  // Set to +100% for new districts
        } else {
            pctChange = (pupils2020 - pupils2019) * 100.0 / pupils2019;
        }
        
        if (abs(pctChange) >= 20) {
            cout << setw(15) << "Primary"
                 << setw(20) << district 
                 << setw(15) << pupils2019
                 << setw(15) << pupils2020
                 << setw(15) << pctChange<<"%" 
                 << setw(20) << (pctChange > 0 ? "Increase" : "Decrease") << endl;
        }
    }

    // Analyze Secondary Level
    for (const auto& districtData : secondaryDistrictTotals) {
        string district = districtData.first;
        int pupils2019 = districtData.second.at(2019);
        int pupils2020 = districtData.second.at(2020);
        double pctChange;
        
        // Handle new districts (2019 = 0)
        if (pupils2019 == 0 && pupils2020 > 0) {
            pctChange = 100.0;  // Set to +100% for new districts
        } else {
            pctChange = (pupils2020 - pupils2019) * 100.0 / pupils2019;
        }
        
        if (abs(pctChange) >= 20) {
            cout << setw(15) << "Secondary"
                 << setw(20) << district 
                 << setw(15) << pupils2019
                 << setw(15) << pupils2020
                 << setw(15) << pctChange<<"%"
                 << setw(20) << (pctChange > 0 ? "Increase" : "Decrease") << endl;
        }
    }

    cout << "\n";
    cout << "Planning recommendations:\n";
    cout << "- Districts with increases: Prepare additional resources and staff\n";
    cout << "- Districts with decreases: Review factors causing enrollment decline\n";

}

int main() {
    vector<Details> pupilData;
    ifstream in_stream("Pupil_Statistics.txt");

    if (!in_stream) {
        cerr << "Error: Could not open input file.\n";
        return -1;
    }

    // Read data once
    Details pupil;
    while (in_stream >> pupil.level >> pupil.state >> pupil.district >> pupil.year >> pupil.Category >> pupil.gender >> pupil.pupil_count) {
        pupilData.push_back(pupil);
    }
    in_stream.close();

    int selection;
    while (true) {
        cout << "==========================" << endl;
        cout << "1. School Category\n2. Descriptive\n3. Planning" << endl;
        cout << "==========================" << endl;
        cout << "Please enter the function you want to use: ";
        cin >> selection;

        if (selection == 1) {
            splitDataByCategory(pupilData, "Primary.txt", "Secondary.txt");
            cout << "Files were successfully split." << endl;
        } else if (selection == 2) {
            calculateDescriptiveStats(pupilData);
        } else if (selection == 3) {
            analyzeDistrictTrends(pupilData);
        } else {
            cout << "Invalid selection. Please try again." << endl;
        }
    }

    return 0;
}
